// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Authentication.proto

#ifndef PROTOBUF_INCLUDED_Authentication_2eproto
#define PROTOBUF_INCLUDED_Authentication_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Authentication_2eproto 

namespace protobuf_Authentication_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Authentication_2eproto
namespace Auth {
class ResponseMsg;
class ResponseMsgDefaultTypeInternal;
extern ResponseMsgDefaultTypeInternal _ResponseMsg_default_instance_;
class RpcProtocol;
class RpcProtocolDefaultTypeInternal;
extern RpcProtocolDefaultTypeInternal _RpcProtocol_default_instance_;
class UserInfo;
class UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
}  // namespace Auth
namespace google {
namespace protobuf {
template<> ::Auth::ResponseMsg* Arena::CreateMaybeMessage<::Auth::ResponseMsg>(Arena*);
template<> ::Auth::RpcProtocol* Arena::CreateMaybeMessage<::Auth::RpcProtocol>(Arena*);
template<> ::Auth::UserInfo* Arena::CreateMaybeMessage<::Auth::UserInfo>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Auth {

// ===================================================================

class RpcProtocol : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Auth.RpcProtocol) */ {
 public:
  RpcProtocol();
  virtual ~RpcProtocol();

  RpcProtocol(const RpcProtocol& from);

  inline RpcProtocol& operator=(const RpcProtocol& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RpcProtocol(RpcProtocol&& from) noexcept
    : RpcProtocol() {
    *this = ::std::move(from);
  }

  inline RpcProtocol& operator=(RpcProtocol&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcProtocol& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RpcProtocol* internal_default_instance() {
    return reinterpret_cast<const RpcProtocol*>(
               &_RpcProtocol_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RpcProtocol* other);
  friend void swap(RpcProtocol& a, RpcProtocol& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RpcProtocol* New() const final {
    return CreateMaybeMessage<RpcProtocol>(NULL);
  }

  RpcProtocol* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RpcProtocol>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RpcProtocol& from);
  void MergeFrom(const RpcProtocol& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcProtocol* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // uint32 serviceId = 1;
  void clear_serviceid();
  static const int kServiceIdFieldNumber = 1;
  ::google::protobuf::uint32 serviceid() const;
  void set_serviceid(::google::protobuf::uint32 value);

  // uint32 methodId = 2;
  void clear_methodid();
  static const int kMethodIdFieldNumber = 2;
  ::google::protobuf::uint32 methodid() const;
  void set_methodid(::google::protobuf::uint32 value);

  // int32 falg = 4;
  void clear_falg();
  static const int kFalgFieldNumber = 4;
  ::google::protobuf::int32 falg() const;
  void set_falg(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Auth.RpcProtocol)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::uint32 serviceid_;
  ::google::protobuf::uint32 methodid_;
  ::google::protobuf::int32 falg_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Authentication_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Auth.UserInfo) */ {
 public:
  UserInfo();
  virtual ~UserInfo();

  UserInfo(const UserInfo& from);

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(UserInfo* other);
  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserInfo* New() const final {
    return CreateMaybeMessage<UserInfo>(NULL);
  }

  UserInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string phoneNum = 1;
  void clear_phonenum();
  static const int kPhoneNumFieldNumber = 1;
  const ::std::string& phonenum() const;
  void set_phonenum(const ::std::string& value);
  #if LANG_CXX11
  void set_phonenum(::std::string&& value);
  #endif
  void set_phonenum(const char* value);
  void set_phonenum(const char* value, size_t size);
  ::std::string* mutable_phonenum();
  ::std::string* release_phonenum();
  void set_allocated_phonenum(::std::string* phonenum);

  // string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:Auth.UserInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr phonenum_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Authentication_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResponseMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Auth.ResponseMsg) */ {
 public:
  ResponseMsg();
  virtual ~ResponseMsg();

  ResponseMsg(const ResponseMsg& from);

  inline ResponseMsg& operator=(const ResponseMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResponseMsg(ResponseMsg&& from) noexcept
    : ResponseMsg() {
    *this = ::std::move(from);
  }

  inline ResponseMsg& operator=(ResponseMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseMsg* internal_default_instance() {
    return reinterpret_cast<const ResponseMsg*>(
               &_ResponseMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ResponseMsg* other);
  friend void swap(ResponseMsg& a, ResponseMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResponseMsg* New() const final {
    return CreateMaybeMessage<ResponseMsg>(NULL);
  }

  ResponseMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResponseMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResponseMsg& from);
  void MergeFrom(const ResponseMsg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const void* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Auth.ResponseMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int32 code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Authentication_2eproto::TableStruct;
};
// ===================================================================

class Authentication_Stub;

class Authentication : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline Authentication() {};
 public:
  virtual ~Authentication();

  typedef Authentication_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void UserApplyReg(::google::protobuf::RpcController* controller,
                       const ::Auth::UserInfo* request,
                       ::Auth::ResponseMsg* response,
                       ::google::protobuf::Closure* done);
  virtual void UserRegister(::google::protobuf::RpcController* controller,
                       const ::Auth::UserInfo* request,
                       ::Auth::ResponseMsg* response,
                       ::google::protobuf::Closure* done);
  virtual void UserLogin(::google::protobuf::RpcController* controller,
                       const ::Auth::UserInfo* request,
                       ::Auth::ResponseMsg* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Authentication);
};

class Authentication_Stub : public Authentication {
 public:
  Authentication_Stub(::google::protobuf::RpcChannel* channel);
  Authentication_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~Authentication_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements Authentication ------------------------------------------

  void UserApplyReg(::google::protobuf::RpcController* controller,
                       const ::Auth::UserInfo* request,
                       ::Auth::ResponseMsg* response,
                       ::google::protobuf::Closure* done);
  void UserRegister(::google::protobuf::RpcController* controller,
                       const ::Auth::UserInfo* request,
                       ::Auth::ResponseMsg* response,
                       ::google::protobuf::Closure* done);
  void UserLogin(::google::protobuf::RpcController* controller,
                       const ::Auth::UserInfo* request,
                       ::Auth::ResponseMsg* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Authentication_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RpcProtocol

// uint32 serviceId = 1;
inline void RpcProtocol::clear_serviceid() {
  serviceid_ = 0u;
}
inline ::google::protobuf::uint32 RpcProtocol::serviceid() const {
  // @@protoc_insertion_point(field_get:Auth.RpcProtocol.serviceId)
  return serviceid_;
}
inline void RpcProtocol::set_serviceid(::google::protobuf::uint32 value) {
  
  serviceid_ = value;
  // @@protoc_insertion_point(field_set:Auth.RpcProtocol.serviceId)
}

// uint32 methodId = 2;
inline void RpcProtocol::clear_methodid() {
  methodid_ = 0u;
}
inline ::google::protobuf::uint32 RpcProtocol::methodid() const {
  // @@protoc_insertion_point(field_get:Auth.RpcProtocol.methodId)
  return methodid_;
}
inline void RpcProtocol::set_methodid(::google::protobuf::uint32 value) {
  
  methodid_ = value;
  // @@protoc_insertion_point(field_set:Auth.RpcProtocol.methodId)
}

// bytes data = 3;
inline void RpcProtocol::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RpcProtocol::data() const {
  // @@protoc_insertion_point(field_get:Auth.RpcProtocol.data)
  return data_.GetNoArena();
}
inline void RpcProtocol::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Auth.RpcProtocol.data)
}
#if LANG_CXX11
inline void RpcProtocol::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Auth.RpcProtocol.data)
}
#endif
inline void RpcProtocol::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Auth.RpcProtocol.data)
}
inline void RpcProtocol::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Auth.RpcProtocol.data)
}
inline ::std::string* RpcProtocol::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:Auth.RpcProtocol.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RpcProtocol::release_data() {
  // @@protoc_insertion_point(field_release:Auth.RpcProtocol.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcProtocol::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:Auth.RpcProtocol.data)
}

// int32 falg = 4;
inline void RpcProtocol::clear_falg() {
  falg_ = 0;
}
inline ::google::protobuf::int32 RpcProtocol::falg() const {
  // @@protoc_insertion_point(field_get:Auth.RpcProtocol.falg)
  return falg_;
}
inline void RpcProtocol::set_falg(::google::protobuf::int32 value) {
  
  falg_ = value;
  // @@protoc_insertion_point(field_set:Auth.RpcProtocol.falg)
}

// -------------------------------------------------------------------

// UserInfo

// string phoneNum = 1;
inline void UserInfo::clear_phonenum() {
  phonenum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::phonenum() const {
  // @@protoc_insertion_point(field_get:Auth.UserInfo.phoneNum)
  return phonenum_.GetNoArena();
}
inline void UserInfo::set_phonenum(const ::std::string& value) {
  
  phonenum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Auth.UserInfo.phoneNum)
}
#if LANG_CXX11
inline void UserInfo::set_phonenum(::std::string&& value) {
  
  phonenum_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Auth.UserInfo.phoneNum)
}
#endif
inline void UserInfo::set_phonenum(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  phonenum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Auth.UserInfo.phoneNum)
}
inline void UserInfo::set_phonenum(const char* value, size_t size) {
  
  phonenum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Auth.UserInfo.phoneNum)
}
inline ::std::string* UserInfo::mutable_phonenum() {
  
  // @@protoc_insertion_point(field_mutable:Auth.UserInfo.phoneNum)
  return phonenum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_phonenum() {
  // @@protoc_insertion_point(field_release:Auth.UserInfo.phoneNum)
  
  return phonenum_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_phonenum(::std::string* phonenum) {
  if (phonenum != NULL) {
    
  } else {
    
  }
  phonenum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phonenum);
  // @@protoc_insertion_point(field_set_allocated:Auth.UserInfo.phoneNum)
}

// string password = 2;
inline void UserInfo::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::password() const {
  // @@protoc_insertion_point(field_get:Auth.UserInfo.password)
  return password_.GetNoArena();
}
inline void UserInfo::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Auth.UserInfo.password)
}
#if LANG_CXX11
inline void UserInfo::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Auth.UserInfo.password)
}
#endif
inline void UserInfo::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Auth.UserInfo.password)
}
inline void UserInfo::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Auth.UserInfo.password)
}
inline ::std::string* UserInfo::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:Auth.UserInfo.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_password() {
  // @@protoc_insertion_point(field_release:Auth.UserInfo.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:Auth.UserInfo.password)
}

// -------------------------------------------------------------------

// ResponseMsg

// int32 code = 1;
inline void ResponseMsg::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 ResponseMsg::code() const {
  // @@protoc_insertion_point(field_get:Auth.ResponseMsg.code)
  return code_;
}
inline void ResponseMsg::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:Auth.ResponseMsg.code)
}

// bytes message = 2;
inline void ResponseMsg::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResponseMsg::message() const {
  // @@protoc_insertion_point(field_get:Auth.ResponseMsg.message)
  return message_.GetNoArena();
}
inline void ResponseMsg::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Auth.ResponseMsg.message)
}
#if LANG_CXX11
inline void ResponseMsg::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Auth.ResponseMsg.message)
}
#endif
inline void ResponseMsg::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Auth.ResponseMsg.message)
}
inline void ResponseMsg::set_message(const void* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Auth.ResponseMsg.message)
}
inline ::std::string* ResponseMsg::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:Auth.ResponseMsg.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseMsg::release_message() {
  // @@protoc_insertion_point(field_release:Auth.ResponseMsg.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseMsg::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:Auth.ResponseMsg.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Auth

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Authentication_2eproto
